import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from fluent import sender, event

TELEGRAM_TOKEN = "8077690095:AAG0R5hErSaeed70YS6rvf8tfSOdDo8VFBQ"  # üîí –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Fluentd
fluent_sender = sender.FluentSender('telegram.bot', host='fluentd', port=24224)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger('telegram_bot')
logger.setLevel(logging.INFO)
handler = logging.StreamHandler()
formatter = logging.Formatter('%(asctime)s %(name)s [%(levelname)s] %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

# –§—É–Ω–∫—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è —É Fluentd
def log_to_fluent(level: str, message: str):
    try:
        event.Event(level, {'message': message})
    except Exception as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ª–æ–≥ —É Fluentd: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ /start"
    logger.info(text)
    log_to_fluent('info', text)
    await update.message.reply_text("–ë–æ—Ç –ø—Ä–∞—Ü—é—î! üëã")

def main():
    start_msg = "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ Telegram"
    logger.info(start_msg)
    log_to_fluent('info', start_msg)

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.run_polling()

if __name__ == "__main__":
    main()
